
.container-fluid
  .row-fluid
    .col-sm-4.col-sm-offset-8
      #search-bar


.container-fluid
  .row-fluid
    .col-sm-2.col-no-padding
      #sidebar
        ul#filters
          each fil in filters
            li(id = fil)
              a(href="##{fil === '#All' ? '' : fil}",data-name="#{fil}")
                if (fil.substring(0,1) === '+')
                  .list-icon.list-icon-plus +
                  =fil.substring(1)
                if (fil.substring(0,1) === '@')
                  .list-icon.list-icon-at @
                  =fil.substring(1)
                if (fil.substring(0,1) === '(')
                  i.fa.fa-star-o.list-icon
                  =fil
                if (fil === '#All')
                  i.fa.fa-home.list-icon
                  | All
                  
                
                if (fil !== '#All')
                  i.fa.fa-times.delete-list-btn
          
      button.btn.center-block#create-filter(data-toggle="modal" data-target="#createModal") Create Filter
    .col-sm-10.col-no-padding
      #ace-editor
.container-fluid
  .row-fluid
    .col-sm-2.col-sm-offset-10
      button.ladda-button#save-btn(data-style="expand-left" onclick="saveFile();" data-color="blue")
        span.ladda-label   
          | Save

script.
  var editor;
  var savebtn;
  
  $(document).ready(function(){
    savebtn = $('#save-btn').ladda();

    var editor = Todotxt.setEditor(ace.edit("ace-editor"));

    editor.getSession().setMode("ace/mode/todotxt");
    editor.setShowPrintMargin(false);
    editor.getSession().setUseWrapMode('free');

    Todotxt.getList(function(err, data){
      if (err){
        $(document).trigger("add-alerts", [
          {
            'message': "Unable to load file from Dropbox. Please try again later.",
            'priority': 'error'
          }
        ]);
        return;
      }

      var langTools = ace.require("ace/ext/language_tools");
      var Autocomplete = ace.require("ace/autocomplete").Autocomplete;
      editor.setOptions({enableBasicAutocompletion: true});
      
      // Clear out the default completers
      while (editor.completers.length > 0){
        // Can't just assign to a new array -- references get messed up. Just empty.
        editor.completers.pop();
      }
      
      var dictCompleter = {
          getCompletions: function(editor, session, pos, prefix, callback) {
              if (prefix.length === 0) { callback(null, []); return }
              
              // From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
              function escapeRegExp(str) {
                return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
              }

              var matches = [];
              $.each(Todotxt.dictionary, function(ind, val){
                if (val.match(new RegExp('^' + escapeRegExp(prefix), "i"))){
                  matches.push({name: val, value: val});
                }                
              });

              callback(null, matches);
          }
      }

      langTools.addCompleter(dictCompleter);

      // Enable tab for auto-completion
      editor.commands.addCommand({
        name: "startAutocomplete",
        exec: function(editor) {
            if (!editor.completer)
              editor.completer = new Autocomplete();
            editor.completer.autoInsert = 
            editor.completer.autoSelect = true;
            editor.completer.showPopup(editor);
            // needed for firefox on mac
            editor.completer.cancelContextMenu();
        },
        bindKey: "tab"
      });

      SAVE_FREQUENCY = 3000; // max frequency of automatic saves
      saveTimer = null;
      lastSave = Date.now();    

      // Listen for keyboard interactions with the editor so we can
      // auto-save.
      $('#ace-editor').keyup(function(e) {
        if (saveTimer != null) {
          // We already have a save scheduled
          return;
        }
        
        tDiff = Date.now() - lastSave;
        // The function to eval when we want to save.
        saveFun = function(){
          lastSave = Date.now();
          saveFile(function(){
            // Restore the periodic check for external updates.
            Todotxt.setCheck(true);
          });

          // Reset the timer.
          saveTimer = null;
        }

        if (tDiff >= SAVE_FREQUENCY) {
          // Then we can just save now
          setTimeout(saveFun, 0);
        } else {
          // Temporarily disable the periodic checks for external updates
          // since our own saves will look like external updates by the time
          // the AJAX makes the round-trip and the editor has changed.
          Todotxt.setCheck(false);

          // We need to schedule a save
          saveTimer = setTimeout(saveFun, SAVE_FREQUENCY - tDiff);
        }
      }); 

    }, true);
  });
    
  saveFile = function(cb){
    savebtn.ladda('start');
    
    Todotxt.save(function(err, data){      
      if (cb){
        cb();
      }
      
      savebtn.ladda('stop');

      if (err){
        $(document).trigger("add-alerts", [
          {
            'message': "Error saving file: " + status,
            'priority': 'error'
          }
        ]);
        return;
      }

      if (data && data.errors && data.errors.length > 0){
        $(document).trigger("add-alerts", [
          {
            'message': data.errors[0],
            'priority': 'error'
          }
        ]);
        return;
      }
    });
  }

#createModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='createModalLabel', aria-hidden='true')
  .modal-dialog
    .modal-content
      .modal-header
        button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
        h4#createModalLabel.modal-title Create New Filter
      .modal-body
        .container-fluid
          .row-fluid
            .col-sm-12
              input#create-filter-input(type="text",data-prefix="+",placeholder="+ProjectA")

          .row-fluid
            .col-sm-4.well.create-filter-option.active-filter-option(data-prefix="+",data-example="+ProjectA")
              h3.create-type-icon +
              h3 Project
              | Arrange your tasks by the project to which you've assigned them. Great for viewing one project at a time.
              
            .col-sm-4.well.create-filter-option(data-prefix="@",data-example="@Phone")
              h3.create-type-icon @
              h3 Context
              | View your tasks by context to see what you can work on right 
              i now
              | .
              
            .col-sm-4.well.create-filter-option(data-prefix="(",data-example="(A)")
              h3.create-type-icon (A)
              h3 Priority
              | Keep an eye on your most important tasks. Filter based on the priority you assigned to a task.

      .modal-footer
        button.btn.btn-default(type='button', data-dismiss='modal') Cancel
        button.btn.btn-primary#create-filter-ok(type='button') Create


#deleteFilter.modal.fade(tabindex='-1', role='dialog', aria-labelledby='deleteLabel', aria-hidden='true')
  .modal-dialog.modal-sm
    .modal-content
      .modal-header
        button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
        h4#deleteLabel.modal-title Delete Filter
      .modal-body
        | Are you sure you want to delete the filter "
        code#delete-list-name
        | "?
      .modal-footer
        button.btn.btn-default(type='button', data-dismiss='modal') Cancel
        button.btn.btn-primary#delete-filter-btn(type='button') Yes, Delete it
