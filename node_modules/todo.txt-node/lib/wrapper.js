(function() {
  var db, filesystem, fs, go, requirejs, root, system, todo, ui;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  go = require('./getopt.js');

  fs = require('fs');

  requirejs = require('./r.js');

  requirejs.config({
    baseUrl: __dirname
  });

  todo = requirejs('./todo');

  db = {};

  system = {
    db: function(msg, tag) {
      var tagRe, _i, _len, _ref, _ref1;
      if (tag == null) {
        return console.log(msg);
      }
      _ref1 = (_ref = db.tags) != null ? _ref : [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tagRe = _ref1[_i];
        if (tagRe.test(tag)) {
          return console.log(msg);
        }
      }
    },
    exit: function(code) {
      return process.exit(code);
    }
  };

  system.db.tags = [/tag/];

  ui = {
    echo: console.log,
    ask: function(prompt) {
      var response;
      process.stdout.write(prompt);
      process.stdin.resume();
      fs = require('fs');
      response = fs.readSync(process.stdin.fd, 1024, 0, 'utf8');
      process.stdin.pause();
      return response[0].trim();
    }
  };

  filesystem = {
    _convertCygPath: function(filePath) {
      return filePath = filePath.replace(/^\/cygdrive\/(.)/, '$1:');
    },
    lastFilePath: '',
    load: function(filePath) {
      var e, result;
      result = null;
      filePath = this._convertCygPath(filePath);
      db('LOAD: ' + filePath, 'fs');
      try {
        result = fs.readFileSync(filePath, 'UTF8');
      } catch (_error) {
        e = _error;
        return;
      }
      db('LOAD: ' + result, 'fs');
      this.lastFilePath = filePath;
      return result;
    },
    save: function(filePath, content) {
      var e;
      filePath = this._convertCygPath(filePath);
      db('SAVE: ' + filePath, 'fs');
      try {
        fs.writeFileSync(filePath, content, 'UTF8');
      } catch (_error) {
        e = _error;
        return;
      }
      return true;
    },
    append: function(filePath, appendContent) {
      var content;
      filePath = this._convertCygPath(filePath);
      db('APPEND: ' + filePath, 'fs');
      content = this.load(filePath);
      db('APPEND: ' + content, 'fs');
      if (content != null) {
        content += appendContent + '\n';
        if (this.save(filePath, content)) {
          return content;
        }
      }
    }
  };

  db = system.db;

  db('tag', 'TEST DB');

  root.run = function() {
    var argv, e, env, exitCode;
    argv = process.argv.slice(2);
    env = {};
    for (e in process.env) {
      env[e] = process.env[e];
    }
    if (env.HOME == null) {
      env.HOME = env.USERPROFILE;
    }
    if (env.PWD == null) {
      env.PWD = process.cwd();
    }
    if (require.main === module) {
      env.HOME = argv.shift();
    }
    todo.init(env, filesystem, ui, system);
    exitCode = todo.run(argv);
    return process.exit(exitCode);
  };

  if (require.main === module) {
    root.run();
  }

}).call(this);
